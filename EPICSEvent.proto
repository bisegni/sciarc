import "google/protobuf/any.proto";
syntax = "proto3";
package EPICS;
option java_package = "edu.stanford.slac.archiverappliance.PB";
option java_outer_classname = "EPICSEvent";
option go_package = "services/serialization";

message FieldValue {
	string name = 1;
	string val = 2;
}

message ScalarString {
  uint32 secondsintoyear = 1;
  uint32 nano = 2;
  string val = 3;
  int32 severity = 4;
  int32 status = 5;
  uint32 repeatcount = 6;
  repeated FieldValue fieldvalues = 7;
  bool fieldactualchange = 8;
}

message ScalarByte {
  uint32 secondsintoyear = 1;
  uint32 nano = 2;
  bytes val = 3;
  int32 severity = 4;
  int32 status = 5;
  uint32 repeatcount = 6; 
  repeated FieldValue fieldvalues = 7;
  bool fieldactualchange = 8;
}

message ScalarShort {
  uint32 secondsintoyear = 1;
  uint32 nano = 2;
  sint32 val = 3;
  int32 severity = 4;
  int32 status = 5;
  uint32 repeatcount = 6; 
  repeated FieldValue fieldvalues = 7;
  bool fieldactualchange = 8;
}

message ScalarInt {
  uint32 secondsintoyear = 1;
  uint32 nano = 2;
  sfixed32 val = 3;
  int32 severity = 4;
  int32 status = 5;
  uint32 repeatcount = 6; 
  repeated FieldValue fieldvalues = 7;
  bool fieldactualchange = 8;
}

message ScalarEnum {
  uint32 secondsintoyear = 1;
  uint32 nano = 2;
  sint32 val = 3;
  int32 severity = 4;
  int32 status = 5;
  uint32 repeatcount = 6; 
  repeated FieldValue fieldvalues = 7;
  bool fieldactualchange = 8;
}

message ScalarFloat {
  uint32 secondsintoyear = 1;
  uint32 nano = 2;
  float val = 3;
  int32 severity = 4;
  int32 status = 5;
  uint32 repeatcount = 6; 
  repeated FieldValue fieldvalues = 7;
  bool fieldactualchange = 8;
}


message ScalarDouble {
  uint32 secondsintoyear = 1;
  uint32 nano = 2;
  double val = 3;
  int32 severity = 4;
  int32 status = 5;
  uint32 repeatcount = 6; 
  repeated FieldValue fieldvalues = 7;
  bool fieldactualchange = 8;
}

message VectorString {
  uint32 secondsintoyear = 1;
  uint32 nano = 2;
  // No packed here as this is available only for primitive fields.
  repeated string val = 3;
  int32 severity = 4;
  int32 status = 5;
  uint32 repeatcount = 6; 
  repeated FieldValue fieldvalues = 7;
  bool fieldactualchange = 8;
}

// VectorChar is the same as ScalarChar as we use ByteString for both
message VectorChar {
  uint32 secondsintoyear = 1;
  uint32 nano = 2;
  bytes val = 3;
  int32 severity = 4;
  int32 status = 5;
  uint32 repeatcount = 6; 
  repeated FieldValue fieldvalues = 7;
  bool fieldactualchange = 8;
}

message VectorShort {
  uint32 secondsintoyear = 1;
  uint32 nano = 2;
  repeated sint32 val = 3 [packed = true];
  int32 severity = 4;
  int32 status = 5;
  uint32 repeatcount = 6; 
  repeated FieldValue fieldvalues = 7;
  bool fieldactualchange = 8;
}

message VectorInt {
  uint32 secondsintoyear = 1;
  uint32 nano = 2;
  repeated sfixed32 val = 3  [packed = true];
  int32 severity = 4;
  int32 status = 5;
  uint32 repeatcount = 6; 
  repeated FieldValue fieldvalues = 7;
  bool fieldactualchange = 8;
}

message VectorEnum {
  uint32 secondsintoyear = 1;
  uint32 nano = 2;
  repeated sint32 val = 3 [packed = true];
  int32 severity = 4;
  int32 status = 5;
  uint32 repeatcount = 6; 
  repeated FieldValue fieldvalues = 7;
  bool fieldactualchange = 8;
}

message VectorFloat {
  uint32 secondsintoyear = 1;
  uint32 nano = 2;
  repeated float val = 3  [packed = true];
  int32 severity = 4;
  int32 status = 5;
  uint32 repeatcount = 6; 
  repeated FieldValue fieldvalues = 7;
  bool fieldactualchange = 8;
}


message VectorDouble {
  uint32 secondsintoyear = 1;
  uint32 nano = 2;
  repeated double val = 3  [packed = true];
  int32 severity = 4;
  int32 status = 5;
  uint32 repeatcount = 6; 
  repeated FieldValue fieldvalues = 7;
  bool fieldactualchange = 8;
}

// A generic v4 container; we simply store the bytes as obtained from EPICS v4 as the val.
message V4GenericBytes {
  uint32 secondsintoyear = 1;
  uint32 nano = 2;
  bytes val = 3;
  int32 severity = 4;
  int32 status = 5;
  uint32 repeatcount = 6; 
  repeated FieldValue fieldvalues = 7;
  bool fieldactualchange = 8;
  // EPICS V4 user tag
  uint32 userTag = 9;
}


// An enumeration that indicates what PB message should be used to unmarshall the following chunk of data
// This is a copy of ArchDBRTypes and the numbers must match the integermap in ArchDBRTypes for the reverse lookup to work  
// Look at DBR2PBTypeMapping to see how we can construct a hashmap that unmarshalls an appropriate language type based on this enum.
enum PayloadType {
	SCALAR_STRING = 0;      
	SCALAR_SHORT = 1;         
	SCALAR_FLOAT = 2;       
	SCALAR_ENUM = 3;
	SCALAR_BYTE = 4;
	SCALAR_INT = 5;
	SCALAR_DOUBLE = 6;
	WAVEFORM_STRING = 7;      
	WAVEFORM_SHORT = 8;         
	WAVEFORM_FLOAT = 9;       
	WAVEFORM_ENUM = 10;
	WAVEFORM_BYTE = 11;
	WAVEFORM_INT = 12;
	WAVEFORM_DOUBLE = 13;
	V4_GENERIC_BYTES = 14;
}

// A payload info is the first line in a chunk of data sent back to the client.
// It tells you how to unmarshall, the pvname and the year for the data
// It also has a lot of fields
message PayloadInfo {
  PayloadType type = 1;
  string pvname = 2;
  int32 elementCount = 4;
  repeated FieldValue headers = 5;
}
